# CI/CD Pipeline for Agentical Multi-Agent Framework
# Automated testing, building, and deployment across multiple environments

name: Agentical CI/CD Pipeline

on:
  push:
    branches: [main, develop, staging]
    tags: ['v*']
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - development
        - staging
        - production
      cloud_provider:
        description: 'Cloud provider for deployment'
        required: true
        default: 'aws'
        type: choice
        options:
        - aws
        - gcp
        - azure

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '20'

jobs:
  # Static Analysis and Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Bandit security scan
      run: |
        pip install bandit[toml]
        bandit -r . -f json -o bandit-results.json || true

    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: |
          trivy-results.sarif
          bandit-results.json

  # Code Quality and Testing
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      surrealdb:
        image: surrealdb/surrealdb:latest
        ports:
          - 8000:8000
        options: >-
          --health-cmd "curl -f http://localhost:8000/health || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        env:
          SURREAL_USER: root
          SURREAL_PASS: root

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run code formatting checks
      run: |
        black --check --diff .
        isort --check-only --diff .

    - name: Run linting
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Run type checking
      run: |
        mypy src/ --ignore-missing-imports

    - name: Run unit tests
      run: |
        pytest tests/ -v --cov=src/ --cov-report=xml --cov-report=html --cov-fail-under=90
      env:
        REDIS_URL: redis://localhost:6379
        SURREALDB_URL: ws://localhost:8000/rpc
        SURREALDB_USERNAME: root
        SURREALDB_PASSWORD: root

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.12'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          coverage.xml
          htmlcov/
          .coverage

  # Frontend Testing
  frontend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint

    - name: Run type checking
      run: npm run type-check

    - name: Run unit tests
      run: npm run test:coverage

    - name: Build application
      run: npm run build

    - name: Upload frontend build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/.next/

  # Docker Build and Push
  build-and-push:
    runs-on: ubuntu-latest
    needs: [security-scan, test, frontend-test]
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        component: [api, frontend, worker]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.component }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: Dockerfile.${{ matrix.component }}
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1

  # Infrastructure Validation
  infrastructure-validate:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        cloud: [aws, gcp, azure]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: '1.6.0'

    - name: Terraform Format Check
      run: terraform fmt -check -recursive infrastructure/${{ matrix.cloud }}/

    - name: Terraform Init
      run: |
        cd infrastructure/${{ matrix.cloud }}
        terraform init -backend=false

    - name: Terraform Validate
      run: |
        cd infrastructure/${{ matrix.cloud }}
        terraform validate

    - name: Run tfsec security scan
      uses: aquasecurity/tfsec-action@v1.0.0
      with:
        working_directory: infrastructure/${{ matrix.cloud }}

  # Kubernetes Manifests Validation
  k8s-validate:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Validate Kubernetes manifests
      run: |
        for file in k8s/*.yaml; do
          kubectl --dry-run=client apply -f "$file"
        done

    - name: Run kubeval
      uses: instrumenta/kubeval-action@master
      with:
        files: k8s/

    - name: Run Polaris audit
      uses: fairwindsops/polaris/.github/actions/polaris@master
      with:
        config: .polaris.yml

  # Deployment to Development
  deploy-dev:
    runs-on: ubuntu-latest
    needs: [build-and-push, infrastructure-validate, k8s-validate]
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'development'
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      if: github.event.inputs.cloud_provider == 'aws' || github.ref == 'refs/heads/develop'
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Deploy to EKS
      if: github.event.inputs.cloud_provider == 'aws' || github.ref == 'refs/heads/develop'
      run: |
        aws eks update-kubeconfig --name agentical-dev
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/configmap.yaml
        kubectl apply -f k8s/secret.yaml
        kubectl apply -f k8s/pvc.yaml
        kubectl apply -f k8s/deployment.yaml
        kubectl apply -f k8s/service.yaml
        kubectl apply -f k8s/ingress.yaml
        kubectl apply -f k8s/hpa.yaml
        kubectl rollout status deployment/agentical-api -n agentical

    - name: Run smoke tests
      run: |
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=agentical -n agentical --timeout=300s
        # Add specific smoke tests here

  # Deployment to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-and-push, infrastructure-validate, k8s-validate]
    if: github.ref == 'refs/heads/staging' || github.event.inputs.environment == 'staging'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure cloud credentials
      run: |
        # Configure based on cloud provider input
        echo "Deploying to ${{ github.event.inputs.cloud_provider || 'aws' }}"

    - name: Deploy to staging
      run: |
        # Multi-cloud deployment logic
        echo "Deploying to staging environment"

    - name: Run integration tests
      run: |
        # Add comprehensive integration tests
        echo "Running integration tests"

  # Deployment to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-and-push, infrastructure-validate, k8s-validate]
    if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.environment == 'production'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Manual approval required
      uses: trstringer/manual-approval@v1
      if: github.event.inputs.environment == 'production'
      with:
        secret: ${{ github.TOKEN }}
        approvers: devqai-team
        minimum-approvals: 2

    - name: Deploy to production
      run: |
        echo "Deploying to production environment"
        # Add production deployment logic

    - name: Run production health checks
      run: |
        # Add production health checks
        echo "Running production health checks"

    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      if: success()
      with:
        status: success
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

    - name: Notify deployment failure
      uses: 8398a7/action-slack@v3
      if: failure()
      with:
        status: failure
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Performance Testing
  performance-test:
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/staging'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run performance tests
      run: |
        # Add K6 or Artillery performance tests
        echo "Running performance tests"

    - name: Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: performance-results/

  # Cleanup
  cleanup:
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Clean up old container images
      run: |
        # Cleanup logic for old images
        echo "Cleaning up old container images"

    - name: Clean up temporary resources
      run: |
        # Cleanup logic for temporary resources
        echo "Cleaning up temporary resources"
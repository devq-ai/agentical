name: Deploy Agentical Status Page

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    # Run every 6 hours to keep status updated
    - cron: "0 */6 * * *"
  workflow_dispatch:
    # Allow manual triggering

permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  generate-status:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Generate status report
        run: |
          python generate_agentical_status.py --save docs/status.json

      - name: Create status HTML page
        run: |
          mkdir -p docs
          cat > docs/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>ðŸ¤– Agentical Status JSON</title>
              <style>
                  body {
                      margin: 0;
                      padding: 20px;
                      background-color: #000000;
                      color: #00ff00;
                      font-family: 'Courier New', Monaco, monospace;
                      font-size: 14px;
                      line-height: 1.4;
                  }
                  .container {
                      max-width: none;
                      margin: 0;
                      padding: 0;
                  }
                  .header {
                      text-align: center;
                      margin-bottom: 30px;
                      padding-bottom: 20px;
                      border-bottom: 1px solid #333;
                  }
                  .header h1 {
                      color: #00ff00;
                      font-size: 2.5em;
                      margin: 0;
                      font-weight: normal;
                  }
                  .header p {
                      color: #00ff00;
                      font-size: 1.1em;
                      margin: 10px 0 20px 0;
                      opacity: 0.8;
                  }
                  .refresh-btn {
                      background: #00ff00;
                      color: #000000;
                      border: 2px solid #00ff00;
                      padding: 8px 16px;
                      font-family: 'Courier New', Monaco, monospace;
                      font-size: 14px;
                      font-weight: bold;
                      cursor: pointer;
                      margin: 10px;
                      text-transform: uppercase;
                  }
                  .refresh-btn:hover {
                      background: #000000;
                      color: #00ff00;
                  }
                  .json-container {
                      background-color: #000000;
                      border: 1px solid #333;
                      padding: 20px;
                      overflow-x: auto;
                      white-space: pre-wrap;
                      word-wrap: break-word;
                  }
                  .json-content {
                      color: #00ff00;
                      font-family: 'Courier New', Monaco, monospace;
                      font-size: 13px;
                      line-height: 1.3;
                  }
                  .loading {
                      text-align: center;
                      color: #00ff00;
                      font-style: italic;
                      padding: 50px;
                  }
                  .error {
                      color: #ff0000;
                      text-align: center;
                      padding: 20px;
                  }
              </style>
          </head>
          <body>
              <div class="container">
                  <div class="header">
                      <h1>ðŸ¤– Agentical Status JSON</h1>
                      <p>Raw JSON data for AI Agent Framework & Orchestration Platform</p>
                      <button class="refresh-btn" onclick="loadStatus()">ðŸ”„ REFRESH JSON</button>
                  </div>

                  <div class="json-container">
                      <div id="json-content" class="json-content loading">
                          Loading status data...
                      </div>
                  </div>
              </div>

              <script>
                  async function loadStatus() {
                      const container = document.getElementById('json-content');
                      container.innerHTML = 'Loading status data...';
                      container.className = 'json-content loading';

                      try {
                          const response = await fetch('status.json?' + Date.now());
                          const data = await response.json();

                          // Format JSON with proper indentation
                          const formattedJson = JSON.stringify(data, null, 2);

                          container.innerHTML = formattedJson;
                          container.className = 'json-content';
                      } catch (error) {
                          container.innerHTML = 'Error loading status data: ' + error.message;
                          container.className = 'json-content error';
                      }
                  }

                  // Load status on page load
                  loadStatus();

                  // Auto-refresh every 5 minutes
                  setInterval(loadStatus, 5 * 60 * 1000);
              </script>
          </body>
          </html>
          EOF

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: "./docs"

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: generate-status
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

# Agentical Main Application Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: agentical-deployment
  namespace: agentical
  labels:
    app.kubernetes.io/name: agentical
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: api
    app.kubernetes.io/part-of: agentical-platform
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: agentical
      app.kubernetes.io/component: api
  template:
    metadata:
      labels:
        app.kubernetes.io/name: agentical
        app.kubernetes.io/component: api
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: agentical-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: agentical
        image: agentical:latest
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8000
          protocol: TCP
        env:
        - name: ENV
          valueFrom:
            configMapKeyRef:
              name: agentical-config
              key: ENV
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: agentical-config
              key: PORT
        - name: SURREALDB_URL
          valueFrom:
            configMapKeyRef:
              name: agentical-config
              key: SURREALDB_URL
        - name: SURREALDB_USERNAME
          valueFrom:
            secretKeyRef:
              name: agentical-secrets
              key: SURREALDB_USERNAME
        - name: SURREALDB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: agentical-secrets
              key: SURREALDB_PASSWORD
        - name: SURREALDB_NAMESPACE
          valueFrom:
            configMapKeyRef:
              name: agentical-config
              key: SURREALDB_NAMESPACE
        - name: SURREALDB_DATABASE
          valueFrom:
            configMapKeyRef:
              name: agentical-config
              key: SURREALDB_DATABASE
        - name: REDIS_URL
          valueFrom:
            configMapKeyRef:
              name: agentical-config
              key: REDIS_URL
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: agentical-secrets
              key: SECRET_KEY
        - name: ANTHROPIC_API_KEY
          valueFrom:
            secretKeyRef:
              name: agentical-secrets
              key: ANTHROPIC_API_KEY
        - name: LOGFIRE_TOKEN
          valueFrom:
            secretKeyRef:
              name: agentical-secrets
              key: LOGFIRE_TOKEN
        resources:
          requests:
            cpu: 500m
            memory: 512Mi
          limits:
            cpu: 2000m
            memory: 2Gi
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 6
        volumeMounts:
        - name: app-logs
          mountPath: /app/logs
        - name: app-cache
          mountPath: /app/cache
        - name: app-data
          mountPath: /app/data
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: app-logs
        emptyDir: {}
      - name: app-cache
        emptyDir: {}
      - name: app-data
        persistentVolumeClaim:
          claimName: agentical-data-pvc
      imagePullSecrets:
      - name: docker-registry-secret
      restartPolicy: Always
      terminationGracePeriodSeconds: 30

---
# SurrealDB Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: surrealdb-deployment
  namespace: agentical
  labels:
    app.kubernetes.io/name: surrealdb
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: agentical-platform
spec:
  replicas: 1
  strategy:
    type: Recreate  # SurrealDB needs persistent storage
  selector:
    matchLabels:
      app.kubernetes.io/name: surrealdb
      app.kubernetes.io/component: database
  template:
    metadata:
      labels:
        app.kubernetes.io/name: surrealdb
        app.kubernetes.io/component: database
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: surrealdb
        image: surrealdb/surrealdb:latest
        imagePullPolicy: IfNotPresent
        command: ["surreal", "start"]
        args:
        - "--log=info"
        - "--user=$(SURREAL_USER)"
        - "--pass=$(SURREAL_PASS)"
        - "file:/data/surreal.db"
        ports:
        - name: http
          containerPort: 8000
          protocol: TCP
        env:
        - name: SURREAL_USER
          valueFrom:
            secretKeyRef:
              name: agentical-secrets
              key: SURREALDB_USERNAME
        - name: SURREAL_PASS
          valueFrom:
            secretKeyRef:
              name: agentical-secrets
              key: SURREALDB_PASSWORD
        resources:
          requests:
            cpu: 250m
            memory: 256Mi
          limits:
            cpu: 1000m
            memory: 1Gi
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        volumeMounts:
        - name: surrealdb-data
          mountPath: /data
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
      volumes:
      - name: surrealdb-data
        persistentVolumeClaim:
          claimName: surrealdb-data-pvc
      restartPolicy: Always

---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-deployment
  namespace: agentical
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: "7"
    app.kubernetes.io/component: cache
    app.kubernetes.io/part-of: agentical-platform
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/component: cache
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        app.kubernetes.io/component: cache
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      containers:
      - name: redis
        image: redis:7-alpine
        imagePullPolicy: IfNotPresent
        command: ["redis-server"]
        args: ["/etc/redis/redis.conf"]
        ports:
        - name: redis
          containerPort: 6379
          protocol: TCP
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 1Gi
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: redis-config
          mountPath: /etc/redis
        - name: redis-data
          mountPath: /data
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
      volumes:
      - name: redis-config
        configMap:
          name: redis-config
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-data-pvc
      restartPolicy: Always

---
# Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-deployment
  namespace: agentical
  labels:
    app.kubernetes.io/name: frontend
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: frontend
    app.kubernetes.io/part-of: agentical-platform
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: frontend
      app.kubernetes.io/component: frontend
  template:
    metadata:
      labels:
        app.kubernetes.io/name: frontend
        app.kubernetes.io/component: frontend
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: frontend
        image: agentical-frontend:latest
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 3000
          protocol: TCP
        env:
        - name: NODE_ENV
          value: "production"
        - name: NEXT_PUBLIC_API_URL
          value: "http://agentical-service:8000"
        resources:
          requests:
            cpu: 250m
            memory: 256Mi
          limits:
            cpu: 1000m
            memory: 1Gi
        livenessProbe:
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      imagePullSecrets:
      - name: docker-registry-secret
      restartPolicy: Always
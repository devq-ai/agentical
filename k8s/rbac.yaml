# RBAC Configuration for Agentical

# Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: agentical-service-account
  namespace: agentical
  labels:
    app.kubernetes.io/name: agentical
    app.kubernetes.io/component: rbac
    app.kubernetes.io/part-of: agentical-platform
automountServiceAccountToken: true

---
# ClusterRole for Agentical (cluster-wide permissions if needed)
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: agentical-cluster-role
  labels:
    app.kubernetes.io/name: agentical
    app.kubernetes.io/component: rbac
rules:
# Minimal cluster-wide permissions
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["get", "list"]
- apiGroups: ["metrics.k8s.io"]
  resources: ["nodes", "pods"]
  verbs: ["get", "list"]

---
# Role for namespace-specific permissions
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: agentical-role
  namespace: agentical
  labels:
    app.kubernetes.io/name: agentical
    app.kubernetes.io/component: rbac
rules:
# Pod management
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["pods/log"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["pods/status"]
  verbs: ["get"]

# ConfigMap and Secret access
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "watch"]

# Service discovery
- apiGroups: [""]
  resources: ["services", "endpoints"]
  verbs: ["get", "list", "watch"]

# Events (for troubleshooting)
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create", "patch"]

# Metrics access
- apiGroups: ["metrics.k8s.io"]
  resources: ["pods", "nodes"]
  verbs: ["get", "list"]

# Custom metrics (if using custom metrics API)
- apiGroups: ["custom.metrics.k8s.io"]
  resources: ["*"]
  verbs: ["get", "list"]

# Deployment status (for health checks)
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments/status"]
  verbs: ["get"]

---
# ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: agentical-cluster-role-binding
  labels:
    app.kubernetes.io/name: agentical
    app.kubernetes.io/component: rbac
subjects:
- kind: ServiceAccount
  name: agentical-service-account
  namespace: agentical
roleRef:
  kind: ClusterRole
  name: agentical-cluster-role
  apiGroup: rbac.authorization.k8s.io

---
# RoleBinding for namespace permissions
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: agentical-role-binding
  namespace: agentical
  labels:
    app.kubernetes.io/name: agentical
    app.kubernetes.io/component: rbac
subjects:
- kind: ServiceAccount
  name: agentical-service-account
  namespace: agentical
roleRef:
  kind: Role
  name: agentical-role
  apiGroup: rbac.authorization.k8s.io

---
# Service Account for Redis (minimal permissions)
apiVersion: v1
kind: ServiceAccount
metadata:
  name: redis-service-account
  namespace: agentical
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: rbac
automountServiceAccountToken: false

---
# Service Account for SurrealDB
apiVersion: v1
kind: ServiceAccount
metadata:
  name: surrealdb-service-account
  namespace: agentical
  labels:
    app.kubernetes.io/name: surrealdb
    app.kubernetes.io/component: rbac
automountServiceAccountToken: false

---
# Role for monitoring (Prometheus/Grafana)
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: agentical-monitoring-role
  labels:
    app.kubernetes.io/name: agentical
    app.kubernetes.io/component: monitoring
rules:
- apiGroups: [""]
  resources: ["nodes", "nodes/proxy", "services", "endpoints", "pods"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get"]
- apiGroups: ["networking.k8s.io"]
  resources: ["ingresses"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "daemonsets", "replicasets", "statefulsets"]
  verbs: ["get", "list", "watch"]

---
# Service Account for monitoring
apiVersion: v1
kind: ServiceAccount
metadata:
  name: monitoring-service-account
  namespace: agentical
  labels:
    app.kubernetes.io/name: monitoring
    app.kubernetes.io/component: rbac

---
# ClusterRoleBinding for monitoring
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: agentical-monitoring-binding
  labels:
    app.kubernetes.io/name: agentical
    app.kubernetes.io/component: monitoring
subjects:
- kind: ServiceAccount
  name: monitoring-service-account
  namespace: agentical
roleRef:
  kind: ClusterRole
  name: agentical-monitoring-role
  apiGroup: rbac.authorization.k8s.io

---
# NetworkPolicy for additional security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: agentical-network-policy
  namespace: agentical
  labels:
    app.kubernetes.io/name: agentical
    app.kubernetes.io/component: security
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: agentical
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow traffic from nginx/ingress
  - from:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: nginx
    ports:
    - protocol: TCP
      port: 8000
  
  # Allow traffic from frontend
  - from:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: frontend
    ports:
    - protocol: TCP
      port: 8000
  
  # Allow monitoring traffic
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 8000
  
  egress:
  # Allow DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  
  # Allow database connections
  - to:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: surrealdb
    ports:
    - protocol: TCP
      port: 8000
  
  # Allow Redis connections
  - to:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: redis
    ports:
    - protocol: TCP
      port: 6379
  
  # Allow external API calls (be more restrictive in production)
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80
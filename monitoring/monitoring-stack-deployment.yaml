# Complete Monitoring Stack Deployment for Agentical
# Combines Logfire (primary) with Prometheus/Grafana (infrastructure)

apiVersion: v1
kind: Namespace
metadata:
  name: monitoring
  labels:
    name: monitoring
    app.kubernetes.io/name: monitoring
    app.kubernetes.io/part-of: agentical-platform

---
# Loki for log aggregation
apiVersion: v1
kind: ConfigMap
metadata:
  name: loki-config
  namespace: monitoring
data:
  loki.yaml: |
    auth_enabled: false
    
    server:
      http_listen_port: 3100
      grpc_listen_port: 9096
    
    common:
      path_prefix: /tmp/loki
      storage:
        filesystem:
          chunks_directory: /tmp/loki/chunks
          rules_directory: /tmp/loki/rules
      replication_factor: 1
      ring:
        instance_addr: 127.0.0.1
        kvstore:
          store: inmemory
    
    query_scheduler:
      max_outstanding_requests_per_tenant: 32768
    
    schema_config:
      configs:
        - from: 2020-10-24
          store: boltdb-shipper
          object_store: filesystem
          schema: v11
          index:
            prefix: index_
            period: 24h
    
    ruler:
      alertmanager_url: http://alertmanager:9093
    
    limits_config:
      enforce_metric_name: false
      reject_old_samples: true
      reject_old_samples_max_age: 168h
      max_cache_freshness_per_query: 10m
      split_queries_by_interval: 15m
      ingestion_rate_mb: 64
      ingestion_burst_size_mb: 128
      max_concurrent_tail_requests: 10
      max_query_length: 721h
      max_query_parallelism: 32
      max_streams_per_user: 10000
      max_line_size: 256000

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: loki
  namespace: monitoring
  labels:
    app.kubernetes.io/name: loki
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: loki
  template:
    metadata:
      labels:
        app.kubernetes.io/name: loki
    spec:
      containers:
      - name: loki
        image: grafana/loki:2.9.0
        ports:
        - containerPort: 3100
          name: http
        - containerPort: 9096
          name: grpc
        args:
        - -config.file=/etc/loki/loki.yaml
        volumeMounts:
        - name: config
          mountPath: /etc/loki
        - name: storage
          mountPath: /tmp/loki
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 1Gi
        livenessProbe:
          httpGet:
            path: /ready
            port: 3100
          initialDelaySeconds: 45
        readinessProbe:
          httpGet:
            path: /ready
            port: 3100
          initialDelaySeconds: 45
      volumes:
      - name: config
        configMap:
          name: loki-config
      - name: storage
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: loki
  namespace: monitoring
  labels:
    app.kubernetes.io/name: loki
spec:
  ports:
  - port: 3100
    targetPort: 3100
    name: http
  - port: 9096
    targetPort: 9096
    name: grpc
  selector:
    app.kubernetes.io/name: loki

---
# Jaeger for distributed tracing
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jaeger
  namespace: monitoring
  labels:
    app.kubernetes.io/name: jaeger
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: jaeger
  template:
    metadata:
      labels:
        app.kubernetes.io/name: jaeger
    spec:
      containers:
      - name: jaeger
        image: jaegertracing/all-in-one:1.49
        ports:
        - containerPort: 16686
          name: ui
        - containerPort: 14268
          name: collector-http
        - containerPort: 14250
          name: collector-grpc
        - containerPort: 6831
          name: agent-compact
          protocol: UDP
        - containerPort: 6832
          name: agent-binary
          protocol: UDP
        env:
        - name: COLLECTOR_OTLP_ENABLED
          value: "true"
        - name: COLLECTOR_ZIPKIN_HTTP_PORT
          value: "9411"
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 1Gi

---
apiVersion: v1
kind: Service
metadata:
  name: jaeger-query
  namespace: monitoring
  labels:
    app.kubernetes.io/name: jaeger
spec:
  ports:
  - port: 16686
    targetPort: 16686
    name: ui
  selector:
    app.kubernetes.io/name: jaeger

---
apiVersion: v1
kind: Service
metadata:
  name: jaeger-collector
  namespace: monitoring
  labels:
    app.kubernetes.io/name: jaeger
spec:
  ports:
  - port: 14268
    targetPort: 14268
    name: collector-http
  - port: 14250
    targetPort: 14250
    name: collector-grpc
  - port: 6831
    targetPort: 6831
    name: agent-compact
    protocol: UDP
  - port: 6832
    targetPort: 6832
    name: agent-binary
    protocol: UDP
  selector:
    app.kubernetes.io/name: jaeger

---
# Node Exporter for infrastructure metrics
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: node-exporter
  namespace: monitoring
  labels:
    app.kubernetes.io/name: node-exporter
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: node-exporter
  template:
    metadata:
      labels:
        app.kubernetes.io/name: node-exporter
    spec:
      hostNetwork: true
      hostPID: true
      containers:
      - name: node-exporter
        image: prom/node-exporter:v1.6.1
        args:
        - --path.procfs=/host/proc
        - --path.sysfs=/host/sys
        - --path.rootfs=/host/root
        - --collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)
        - --collector.netdev.device-exclude=^(veth.*|docker.*|br-.*|lo)$$
        ports:
        - containerPort: 9100
          name: metrics
        resources:
          requests:
            cpu: 50m
            memory: 50Mi
          limits:
            cpu: 200m
            memory: 200Mi
        volumeMounts:
        - name: proc
          mountPath: /host/proc
          readOnly: true
        - name: sys
          mountPath: /host/sys
          readOnly: true
        - name: root
          mountPath: /host/root
          readOnly: true
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
      tolerations:
      - effect: NoSchedule
        operator: Exists
      volumes:
      - name: proc
        hostPath:
          path: /proc
      - name: sys
        hostPath:
          path: /sys
      - name: root
        hostPath:
          path: /

---
apiVersion: v1
kind: Service
metadata:
  name: node-exporter
  namespace: monitoring
  labels:
    app.kubernetes.io/name: node-exporter
spec:
  ports:
  - port: 9100
    targetPort: 9100
    name: metrics
  selector:
    app.kubernetes.io/name: node-exporter

---
# ServiceMonitor for Prometheus to scrape node-exporter
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: node-exporter
  namespace: monitoring
  labels:
    app.kubernetes.io/name: node-exporter
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: node-exporter
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics

---
# ServiceMonitor for Agentical applications
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: agentical-metrics
  namespace: monitoring
  labels:
    app.kubernetes.io/name: agentical
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: agentical
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics
  namespaceSelector:
    matchNames:
    - agentical

---
# Monitoring dashboard ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: monitoring-dashboards
  namespace: monitoring
  labels:
    app.kubernetes.io/name: monitoring-dashboards
data:
  agentical-monitoring.yaml: |
    # Monitoring Configuration for Agentical
    
    logfire:
      # Primary observability platform
      enabled: true
      token: "${LOGFIRE_TOKEN}"
      project_name: "agentical-production"
      service_name: "agentical-api"
      environment: "production"
      
      # Alert rules (configured in Logfire dashboard)
      alerts:
        - name: "High Error Rate"
          condition: "error_rate > 5%"
          window: "5m"
          severity: "critical"
        
        - name: "Slow Response Time"
          condition: "p95_response_time > 2s" 
          window: "5m"
          severity: "warning"
        
        - name: "Agent Task Failures"
          condition: "agent_failure_rate > 10%"
          window: "10m"
          severity: "critical"
    
    prometheus:
      # Infrastructure monitoring
      enabled: true
      retention: "30d"
      storage_size: "100Gi"
      
      # Scrape configs
      scrape_configs:
        - job_name: 'agentical-api'
          kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names: ['agentical']
          relabel_configs:
          - source_labels: [__meta_kubernetes_service_name]
            action: keep
            regex: agentical-api
        
        - job_name: 'surrealdb'
          kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names: ['agentical']
          relabel_configs:
          - source_labels: [__meta_kubernetes_service_name]
            action: keep
            regex: surrealdb
        
        - job_name: 'redis'
          kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names: ['agentical']
          relabel_configs:
          - source_labels: [__meta_kubernetes_service_name]
            action: keep
            regex: redis
    
    grafana:
      # Visualization for infrastructure metrics
      enabled: true
      admin_password: "AgenticalSecure2024!"
      
      dashboards:
        - name: "Agentical Overview"
          file: "agentical-overview.json"
        
        - name: "Infrastructure Health"
          file: "infrastructure-health.json"
        
        - name: "Agent Performance"
          file: "agent-performance.json"
    
    alertmanager:
      # Alert routing and notification
      enabled: true
      
      routes:
        - match:
            severity: critical
          receiver: 'critical-alerts'
          group_wait: 5s
          repeat_interval: 5m
        
        - match:
            severity: warning
          receiver: 'warning-alerts'
          repeat_interval: 30m
      
      receivers:
        - name: 'critical-alerts'
          slack_configs:
          - channel: '#critical-alerts'
            api_url: '${SLACK_WEBHOOK_URL}'
            title: '🚨 CRITICAL: {{ .GroupLabels.alertname }}'
          
          email_configs:
          - to: 'oncall@agentical.com'
            subject: 'CRITICAL Alert: {{ .GroupLabels.alertname }}'
        
        - name: 'warning-alerts'
          slack_configs:
          - channel: '#warnings'
            api_url: '${SLACK_WEBHOOK_URL}'
            title: '⚠️ WARNING: {{ .GroupLabels.alertname }}'

---
# Ingress for monitoring UIs
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: monitoring-ingress
  namespace: monitoring
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - grafana.agentical.com
    - jaeger.agentical.com
    secretName: monitoring-tls
  rules:
  - host: grafana.agentical.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: prometheus-grafana
            port:
              number: 80
  - host: jaeger.agentical.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: jaeger-query
            port:
              number: 16686

---
# NetworkPolicy for monitoring namespace
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: monitoring-network-policy
  namespace: monitoring
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow traffic from agentical namespace
  - from:
    - namespaceSelector:
        matchLabels:
          name: agentical
  
  # Allow traffic from ingress controller
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
  
  # Allow inter-monitoring communication
  - from:
    - podSelector: {}
  
  egress:
  # Allow DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  
  # Allow communication to agentical namespace
  - to:
    - namespaceSelector:
        matchLabels:
          name: agentical
  
  # Allow inter-monitoring communication
  - to:
    - podSelector: {}
  
  # Allow external webhook calls (Slack, email)
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80